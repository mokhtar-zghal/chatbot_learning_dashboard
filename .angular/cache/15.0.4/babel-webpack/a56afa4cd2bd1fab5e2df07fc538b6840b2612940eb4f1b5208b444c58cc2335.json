{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Constant } from '../constant';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../services/intent.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"../core/core.service\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"../chips/chips.component\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Authorization': 'Basic ' + btoa('apikey:gonGjOBnw_kd-DCPmduSpvPCzCInN-SM3W_u4H4lJTgn')\n  })\n};\nconst postIntentUrl = 'https://api.au-syd.assistant.watson.cloud.ibm.com/instances/18b8007d-97e0-478d-9f54-27cc3bec8c2c/v1/' + 'workspaces/3756dbf5-ea5c-43cf-a0d2-81dfa1bbe60b/intents?version=2023-02-01';\nconst dialog_nodeUrl = 'https://api.au-syd.assistant.watson.cloud.ibm.com/instances/18b8007d-97e0-478d-9f54-27cc3bec8c2c/v1/' + 'workspaces/3756dbf5-ea5c-43cf-a0d2-81dfa1bbe60b/dialog_nodes?version=2023-02-01';\nconst x = '{\"intent\":\"';\nexport class IntentAddEditComponent {\n  constructor(http, _fb, _empService, _dialogRef, data, _coreService) {\n    this.http = http;\n    this._fb = _fb;\n    this._empService = _empService;\n    this._dialogRef = _dialogRef;\n    this.data = data;\n    this._coreService = _coreService;\n    this.questions = [];\n    this.responses = [];\n    this.question = Constant.question;\n    this.reponse = Constant.reponse;\n    this.items = [];\n    this.selectedItem = '';\n    this.intentForm = this._fb.group({\n      intent: '',\n      questions: [],\n      responses: [[]] // Initialize with empty array\n    });\n  }\n\n  onQuestionsChanged(newItems) {\n    this.questions = newItems;\n    this.intentForm.get('questions')?.setValue(newItems);\n  }\n  onResponsesChanged(newItems) {\n    this.responses = newItems;\n    this.intentForm.get('responses')?.setValue(newItems);\n  }\n  selectItem(item) {\n    this.selectedItem = item;\n  }\n  updateItem() {\n    const index = this.items.length;\n    if (this.selectedItem != null && this.selectedItem != '') {\n      this.items[index] = this.selectedItem;\n      this.selectedItem = null;\n    }\n  }\n  deleteItem(item) {\n    const index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n    }\n  }\n  ngOnInit() {\n    if (this.data !== null) {\n      this.intentForm.get('intent')?.disable(); //? to safely access the intentForm FormGroup and the intent form control.\n      // This operator checks if the object is null or undefined before accessing its properties or methods\n    }\n\n    this.intentForm.patchValue(this.data);\n  }\n  onFormSubmit() {\n    if (this.intentForm.valid) {\n      if (this.data) {\n        this.http.post(`https://api.au-syd.assistant.watson.cloud.ibm.com/instances/18b8007d-97e0-478d-9f54-27cc3bec8c2c/v1/` + `workspaces/3756dbf5-ea5c-43cf-a0d2-81dfa1bbe60b/intents/` + this.intentForm.get('intent')?.value + `?version=2023-02-01`, this.jsonIntents(this.intentForm.get('intent')?.value, this.intentForm.get('questions')?.value), httpOptions).subscribe(result => {\n          console.log(result);\n        }, () => console.log('erreur'));\n        this.http.post(`https://api.au-syd.assistant.watson.cloud.ibm.com/instances/18b8007d-97e0-478d-9f54-27cc3bec8c2c/v1/workspaces/3756dbf5-ea5c-43cf-a0d2-81dfa1bbe60b/dialog_nodes/` + this.intentForm.get('intent')?.value + `?version=2023-02-01`, this.jsonDialogNode(this.intentForm.get('intent')?.value, this.intentForm.get('responses')?.value), httpOptions).subscribe({\n          next: () => {\n            this._coreService.openSnackBar('updated');\n            this._dialogRef.close({\n              intent: this.intentForm.get('intent')?.value,\n              responses: this.intentForm.get('responses')?.value,\n              questions: this.intentForm.get('questions')?.value\n            });\n          },\n          error: err => {\n            console.error(err);\n          }\n        });\n      } else {\n        console.log(\"create\");\n        console.log(this.intentForm.value);\n        if (this.intentForm.get('intent')?.value != \"\" && this.intentForm.get('questions')?.value.length != 0 && this.intentForm.get('responses')?.value.length != 0) {\n          this.http.post(postIntentUrl, this.jsonIntent(this.intentForm.get('intent')?.value, this.intentForm.get('questions')?.value), httpOptions).subscribe(result => {\n            console.log(result);\n          }, () => console.log('dictionary already exists... use the update option in the main page'));\n          this.http.post(dialog_nodeUrl, this.jsonDialogNode(this.intentForm.get('intent')?.value, this.intentForm.get('responses')?.value), httpOptions).subscribe({\n            next: () => {\n              this._coreService.openSnackBar('created');\n              this._dialogRef.close({\n                intent: this.intentForm.get('intent')?.value,\n                responses: this.intentForm.get('responses')?.value,\n                questions: this.intentForm.get('questions')?.value\n              });\n            },\n            error: err => {\n              console.error(err);\n            }\n          });\n        }\n      }\n    }\n  }\n  jsonDialogNode(dict, responses) {\n    return {\n      dialog_node: dict,\n      conditions: `#${dict}`,\n      output: {\n        generic: [{\n          response_type: \"text\",\n          values: responses.map(value => ({\n            text: value\n          }))\n        }]\n      },\n      title: dict\n    };\n  }\n  jsonIntents(dict, responses) {\n    return {\n      intent: dict,\n      examples: responses.map(value => ({\n        text: value\n      }))\n    };\n  }\n  jsonIntent(dict, userInput) {\n    let examples = \"\";\n    for (const element of userInput) {\n      examples += '{\"text\":\"' + element + '\"},';\n    }\n    examples = examples.slice(0, -1);\n    return '{\"intent\":\"' + dict + '\",\"examples\":[' + examples + ']}';\n  }\n}\nIntentAddEditComponent.ɵfac = function IntentAddEditComponent_Factory(t) {\n  return new (t || IntentAddEditComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.IntentService), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i5.CoreService));\n};\nIntentAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: IntentAddEditComponent,\n  selectors: [[\"app-emp-add-edit\"]],\n  decls: 17,\n  vars: 7,\n  consts: [[\"mat-dialog-title\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [\"mat-dialog-content\", \"\", 1, \"content\"], [1, \"row\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Ex. greeting\", \"required\", \"\", \"formControlName\", \"intent\"], [3, \"title\", \"data\", \"itemsChanged\"], [\"mat-dialog-actions\", \"\", 1, \"action\"], [\"mat-raised-button\", \"\", \"type\", \"button\", 3, \"mat-dialog-close\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"]],\n  template: function IntentAddEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Dictionary Form\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function IntentAddEditComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onFormSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"mat-form-field\", 4)(7, \"mat-label\");\n      i0.ɵɵtext(8, \"Nom dictionnaire\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 5);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"app-chips\", 6);\n      i0.ɵɵlistener(\"itemsChanged\", function IntentAddEditComponent_Template_app_chips_itemsChanged_10_listener($event) {\n        return ctx.onQuestionsChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"app-chips\", 6);\n      i0.ɵɵlistener(\"itemsChanged\", function IntentAddEditComponent_Template_app_chips_itemsChanged_11_listener($event) {\n        return ctx.onResponsesChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"button\", 8);\n      i0.ɵɵtext(14, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 9);\n      i0.ɵɵtext(16);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.intentForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"title\", ctx.question)(\"data\", ctx.data);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"title\", ctx.reponse)(\"data\", ctx.data);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"mat-dialog-close\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.data ? \"Update\" : \"Save\");\n    }\n  },\n  dependencies: [i6.MatButton, i4.MatDialogClose, i4.MatDialogTitle, i4.MatDialogContent, i4.MatDialogActions, i7.MatFormField, i7.MatLabel, i8.MatInput, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName, i9.ChipsComponent],\n  styles: [\".content[_ngcontent-%COMP%]{padding-top:10px}.row[_ngcontent-%COMP%]{display:flex;gap:10px}.row[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.action[_ngcontent-%COMP%]{padding:0 25px 20px}.action[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{flex:1}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}