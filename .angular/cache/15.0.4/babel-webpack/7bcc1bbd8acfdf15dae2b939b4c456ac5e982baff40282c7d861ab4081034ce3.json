{"ast":null,"code":"import { ENTER } from '@angular/cdk/keycodes';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/icon\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/chips\";\nfunction ChipsComponent_mat_chip_row_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip-row\", 5);\n    i0.ɵɵlistener(\"removed\", function ChipsComponent_mat_chip_row_6_Template_mat_chip_row_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const item_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.remove(item_r2));\n    })(\"edited\", function ChipsComponent_mat_chip_row_6_Template_mat_chip_row_edited_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const item_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.edit(item_r2, $event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 6)(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"editable\", true);\n    i0.ɵɵattribute(\"aria-description\", \"press enter to edit \" + item_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r2, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"remove \" + item_r2);\n  }\n}\nexport class ChipsComponent {\n  constructor() {\n    this.type = '';\n    this.title = '';\n    this.label = '';\n    this.items = [];\n    this.addOnBlur = true;\n    this.separatorKeysCodes = [ENTER];\n    this.itemsChanged = new EventEmitter();\n  }\n  ngOnInit() {\n    this.label = this.title == 'Question' ? 'Enter questions*' : 'Enter responses*';\n    this.title == 'Question' ? this.items.push(...this.data.questions) : this.items.push(...this.data.responses);\n    this.itemsChanged.emit(this.items);\n  }\n  add(event) {\n    const value = (event.value || '').trim();\n    // Add question/response to the array named items\n    if (value) {\n      this.items.push(value);\n      this.itemsChanged.emit(this.items);\n    }\n    // Clear the input value\n    event.chipInput.clear();\n  }\n  remove(qu) {\n    const index = this.items.indexOf(qu);\n    if (index >= 0) {\n      this.items.splice(index, 1);\n      this.itemsChanged.emit(this.items);\n    }\n  }\n  edit(item, event) {\n    const value = event.value.trim();\n    // Remove question/response if it no longer has a name\n    if (!value) {\n      this.remove(item);\n      return;\n    }\n    // Edit existing question/response\n    const index = this.items.indexOf(item);\n    if (index >= 0) {\n      this.items[index] = value;\n      this.itemsChanged.emit(this.items);\n    }\n  }\n}\nChipsComponent.ɵfac = function ChipsComponent_Factory(t) {\n  return new (t || ChipsComponent)();\n};\nChipsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChipsComponent,\n  selectors: [[\"app-chips\"]],\n  inputs: {\n    title: \"title\",\n    data: \"data\"\n  },\n  outputs: {\n    itemsChanged: \"itemsChanged\"\n  },\n  decls: 8,\n  vars: 6,\n  consts: [[2, \"text-align\", \"center\"], [\"appearance\", \"fill\", 1, \"mat-mdc-dialog-content\", \"mdc-dialog__content\", \"content\", \"mat-form-field-hide-placeholder\"], [\"chipGrid\", \"\"], [3, \"editable\", \"removed\", \"edited\", 4, \"ngFor\", \"ngForOf\"], [\"required\", \"\", 3, \"placeholder\", \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputAddOnBlur\", \"matChipInputTokenEnd\"], [3, \"editable\", \"removed\", \"edited\"], [\"matChipRemove\", \"\"]],\n  template: function ChipsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-chip-grid\", null, 2);\n      i0.ɵɵtemplate(6, ChipsComponent_mat_chip_row_6_Template, 5, 4, \"mat-chip-row\", 3);\n      i0.ɵɵelementStart(7, \"input\", 4);\n      i0.ɵɵlistener(\"matChipInputTokenEnd\", function ChipsComponent_Template_input_matChipInputTokenEnd_7_listener($event) {\n        return ctx.add($event);\n      });\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(5);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"placeholder\", \"New \" + ctx.title)(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes)(\"matChipInputAddOnBlur\", ctx.addOnBlur);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.MatIcon, i3.MatFormField, i3.MatLabel, i4.MatChipGrid, i4.MatChipInput, i4.MatChipRemove, i4.MatChipRow]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}